#include <stdio.h>
#include <iostream>
#include <fstream>

#include "Colormod.hpp"
#include "TextFile.hpp"
//#include "Tree.hpp"
//#include "TreeNode.hpp"
#include "ListNode.hpp"
#include "List.hpp"
#include "BST.cpp"
#include "BSTree.hpp"

using namespace std;

void showContent() {
	// Imprimir el contenido de las series por pantalla
}

int main() {
	
    TextFile file;
    int lines = file.countLines();
    
	// Para poder imprimir en colores
	Color::Modifier red(Color::FG_RED);
	Color::Modifier green(Color::FG_GREEN);
    Color::Modifier def(Color::FG_DEFAULT);
	
    
//Aquí se genera la lista con todos los números de la serie
    List list;
    list.createList(0); // 1 = lista con repeticiones, 0 = lista sin repeticiones
    List list1;
    list1.createList(1);
/*
    BSTree tree[0];
    for(int i = 1; i<=lines; i++)
    {
        list = file.createList(); 
        //list[i].setName(i);
        cout<<"Tree "<<i<<": ";
        //tree[i].createTree(i);
        //tree[i].setName(i);
    }
*/
// Prueba del funcionamiento del BST
	/*
	BST t;
    t.insert(20);
    t.insert(25);
    t.insert(15);
    t.insert(10);
    t.insert(30);
    t.display();*/
	
	int arrSize = 0;
	int arr[10000];
	
	ifstream myfile("input.txt");
	if (myfile.is_open())
	{
        int x;
		while ( true)
		{
			myfile >> x;
			if (myfile.eof()) //If end of file
            break;
			arr[arrSize++] = x;
		}
    // I should have closed the file here, but as the program was ending I was lazy	
	}
	else
	{
		cout << "Unable to open file";
	}
    myfile.close();
	
	int choice;
	bool showMenu = true;
	while (showMenu != false){
	cout << "\n";
	cout << "***   MENU   ***\n";
	cout << "\n";
	cout << " 1 -> Show the series inside the text file.\n";
	cout << " 2 -> Show all the numbers.\n";
	cout << " 3 -> Count all distinct numbers.\n";
	cout << " 4 -> Calculate the average number of both DS.\n";
	cout << " 5 -> Get the max and min numbers of both DS.\n";
	cout << " 6 -> Search for a specific number.\n";
	cout << " 7 -> Search for the number with higher occurrences.\n";
	cout << " 8 -> Empty both DS and regenerate them using the series.\n";
    cout << " 9 -> Add a new serie.\n";
	cout << " 10 -> Finish the program.\n";
	cout << "\n";
	cout << "***   ****   ***\n";
	cout << "\n";
	cout << "> Enter your choice and press return: ";
	cin >> choice;
	cout << "\n";

	switch (choice) {
	
		case 1:
			cout << green << "> The series inside the text file are:\n";
			file.showContent();
			cout << "> End of the task. Redirect to menu.\n" << def;
		break;
		
		case 2:
			cout << green << "> The numbers generated by the series are:\n";
            //Aquí se muestran por pantalla los elementos de las series creados por las listas
            cout<<"List: ";
            list.showList();
            
            //Aquí los árboles
            
            
			cout << "> End of the task. Redirect to menu.\n" << def;		
		break;
		
		case 3:
			cout<<"Distinct numbers: " <<endl;
            cout<<list.getNDistint()<<endl;
		cout << "> End of the task. Redirect to menu.\n";
		break;
		
		case 4:
        cout<<"Average of list: "<<endl;
        cout<<list1.average(list1.getList())<<endl;
		cout << "> End of the task. Redirect to menu.\n";
		break;
		
		case 5:
        cout<<"The maximum and minimum numbers of the list are: \n"<<endl;
            cout<<"Maximum: "<<list.findMax(list.getList())<<endl;
            cout<<"Minimum: "<<list.findMin(list.getList())<<endl;
			//cout << "Maxium: "<<tree.findMax(tree)<<endl;
			//cout << "Minimum: "<<tree.findMin(tree)<<endl;
        
        
		cout << "\n";
		cout << "> End of the task. Redirect to menu.\n";

		break;
		
		case 6:
        int num;
		cout << "Introduce the number you want to find: \n";
        cin>>num;
            cout<<"Is "<<num<<" in the list " <<"? "<<endl;
            if(list.searchInList(num))
                cout<<"Yes"<<endl;
            else
                cout<<"No"<<endl;
        cout << "> End of the task. Redirect to menu.\n";
        
		break;
		
		case 7:
		cout << "> End of the task. Redirect to menu.\n";
		// rest of code here
		break;
		
		case 8:
		cout << "> End of the task. Redirect to menu.\n";
		// Hay que implementar el makenull de la clase lista
		break;
		
        case 9:
        cout<<"We are going to create a new serie: "<<endl;
            file.write();
            main();
		cout << "> End of the task. Redirect to menu.\n";
		// rest of code here
		break;
		
		case 10:
		cout << "> Goodbye!\n";
		showMenu = false;
		break;
		
		default:
		cout << "> The input number is not a valid choice. Choose again: ";
		cin >> choice;
		break;
		
	}

	}
    
	return 0;
}
