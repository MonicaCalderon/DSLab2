#include <stdio.h>
#include <iostream>
#include <fstream>
#include <ctime>//For the clock

#include "Colormod.hpp"
#include "TextFile.hpp"
//#include "Tree.hpp"
//#include "TreeNode.hpp"
#include "ListNode.hpp"
#include "List.hpp"
#include "BSTree.hpp"

using namespace std;

void showContent() {
	// Imprimir el contenido de las series por pantalla
}

int main() {
	
    double t0,t1; //To count times
    
    TextFile file;
    
	// Para poder imprimir en colores
	Color::Modifier red(Color::FG_RED);
	Color::Modifier green(Color::FG_GREEN);
    Color::Modifier def(Color::FG_DEFAULT);
	
    
//Aquí se genera la lista con todos los números de la serie
    cout<<"Creating the list: "<<endl;
    List list;
    list.createList(0); // 1 = lista con repeticiones, 0 = lista sin repeticiones
    List list1;
    list1.createList(1);
    cout<<endl;
    
//Aquí se genera el árbol con todos los números de la serie
    cout<<"Creating the tree: "<<endl;
    BSTree tree;
    tree.createTree();
    
//MENU
	
	int choice;
	bool showMenu = true;
	while (showMenu != false){
	cout << "\n";
	cout << "***   MENU   ***\n";
	cout << "\n";
	cout << " 1 -> Show the series inside the text file.\n";
	cout << " 2 -> Show all the numbers.\n";
	cout << " 3 -> Count all distinct numbers.\n";
	cout << " 4 -> Calculate the average number of both DS.\n";
	cout << " 5 -> Get the max and min numbers of both DS.\n";
	cout << " 6 -> Search for a specific number.\n";
	cout << " 7 -> Empty both DS and regenerate them using the series.\n";
    cout << " 8 -> Add a new serie.\n";
	cout << " 9 -> Finish the program.\n";
	cout << "\n";
	cout << "***   ****   ***\n";
	cout << "\n";
	cout << "> Enter your choice and press return: ";
	cin >> choice;
	cout << "\n";

	switch (choice) {
	
		case 1:
			cout << green << "> The series inside the text file are:\n";
			file.showContent();
			cout << "> End of the task. Redirect to menu.\n" << def;
		break;
		
		case 2:
			cout << green << "> The numbers generated by the series are:\n";
            //Aquí se muestran por pantalla los elementos de las series creados por las listas
            cout<<"List: ";
            list.showList();
            
            //Aquí los árboles
			cout << green << "> The numbers generated by the trees are:\n";
            cout<<"Tree: ";
            tree.display();
            
			cout << "> End of the task. Redirect to menu.\n" << def;		
		break;
		
		case 3:
			cout<<"Distinct numbers: " <<endl;
            t0=clock();
            cout<<"In list: "<<list.getNDistint()<<endl;
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
            
            t0=clock();
            cout<<"In tree: "<<tree.getNDistint()<<endl;
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
            
		cout << "> End of the task. Redirect to menu.\n";
		break;
		
		case 4:
        cout<<"Average of list: "<<endl;
        t0=clock();
        cout<<list1.average(list1.getList())<<endl;
        t1=clock();
        cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
        
        cout<<"Average of tree: "<<endl;
        t0=clock();
        cout<<tree.average()<<endl; //The tree do not save the repeated elements
        t1=clock();
        cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
        
        cout<<"\nAverages are diferents because the tree do not save repeated elements. "<<endl;
		
        cout << "> End of the task. Redirect to menu.\n";
		break;
		
		case 5:
        cout<<"The maximum and minimum numbers of the list are: \n"<<endl;
            t0=clock();
            cout<<"Maximum: "<<list.findMax(list.getList())<<endl;
            cout<<"Minimum: "<<list.findMin(list.getList())<<endl;
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
        
        cout<<"The maximum and minimum numbers of the trees are: \n"<<endl;
            t0=clock();
			cout << "Maximum: "<<tree.findMax()<<endl;
			cout << "Minimum: "<<tree.findMin()<<endl;
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;

		cout << "\n";
		cout << "> End of the task. Redirect to menu.\n";

		break;
		
		case 6:
        int num;
		cout << "Introduce the number you want to find: \n";
        cin>>num;
            cout<<"Is "<<num<<" in the list " <<"? "<<endl;
            t0=clock();
            if(list.searchInList(num))
                cout<<"Yes"<<endl;
            else
                cout<<"No"<<endl;
                
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
            
            t0=clock();
             cout<<"Is "<<num<<" in the tree " <<"? "<<endl;
            if(tree.searchInTree(num))
                cout<<"Yes"<<endl;
            else
                cout<<"No"<<endl;
            
            t1=clock();
            cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
                
        cout << "> End of the task. Redirect to menu.\n";
        
		break;
		
		case 7:
        t0=clock();
        cout<<"We are going to empty the lists: "<<endl;
        list.makenull(0);
        list1.makenull(1);
        cout<<endl;
        cout<<"Now we are going to create the list: "<<endl;
        list.createList(0);
        list1.createList(1);
        cout<<"List without occurrences: ";
        list.showList();
        cout<<"List with occurences: ";
        list1.showList();
        
        t1=clock();
        cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
        
        t0=clock();
        cout<<"We are going to empty the tree: "<<endl;
        tree.makeEmpty();
        tree.display();
        cout<<endl;
        cout<<"Now we are going to create the tree: "<<endl;
        tree.createTree();
        cout<<"Tree: ";
        tree.display();
        
        t1=clock();
        cout<<"Time: "<<(double(t1-t0)/CLOCKS_PER_SEC)<<endl;
        
		cout << "> End of the task. Redirect to menu.\n";
		break;
		
        case 8:
        cout<<"We are going to create a new serie: "<<endl;
            file.write();
            main();
		cout << "> End of the task. Redirect to menu.\n";
		// rest of code here
		break;
		
		case 9:
		cout << "> Goodbye!\n";
		showMenu = false;
		break;
		
		default:
		cout << "> The input number is not a valid choice. Choose again: ";
		cin >> choice;
		break;
		
	}

	}
    
	return 0;
}
